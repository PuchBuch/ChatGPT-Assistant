import os.path

from libs.helper import *
import streamlit as st
import uuid
import pandas as pd
import openai
from requests.models import ChunkedEncodingError
from streamlit.components import v1
from voice_toolkit import voice_toolkit

if "apikey" in st.secrets:
    openai.api_base = st.secrets["apikey"]
else:
    openai.api_base = "https://api.openai.com/v1"

st.set_page_config(page_title="ChatGPT –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", layout="wide", page_icon="ü§ñ")
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –µ–ª–µ–º–µ–Ω—Ç–æ–≤
st.markdown(css_code, unsafe_allow_html=True)

if "initial_settings" not in st.session_state:
    # –û–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
    st.session_state["path"] = "history_chats_file"
    st.session_state["history_chats"] = get_history_chats(st.session_state["path"])
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ss
    st.session_state["delete_dict"] = {}
    st.session_state["delete_count"] = 0
    st.session_state["voice_flag"] = ""
    st.session_state["user_voice_value"] = ""
    st.session_state["error_info"] = ""
    st.session_state["current_chat_index"] = 0
    st.session_state["user_input_content"] = ""
    # –ß—Ç–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if os.path.exists("./set.json"):
        with open("./set.json", "r", encoding="utf-8") as f:
            data_set = json.load(f)
        for key, value in data_set.items():
            st.session_state[key] = value
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    st.session_state["initial_settings"] = True

with st.sidebar:
    st.markdown("# ü§ñ –û–∫–Ω–æ —á–∞—Ç–∞")
    # –¶–µ–ª—å—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    chat_container = st.container()
    with chat_container:
        current_chat = st.radio(
            label="–û–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞",
            format_func=lambda x: x.split("_")[0] if "_" in x else x,
            options=st.session_state["history_chats"],
            label_visibility="collapsed",
            index=st.session_state["current_chat_index"],
            key="current_chat"
            + st.session_state["history_chats"][st.session_state["current_chat_index"]],
            # on_change=current_chat_callback  # –ó–¥–µ—Å—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∏–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.
        )
    st.write("---")


# –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–∏–ª
    
def write_data(new_chat_name=current_chat):
    if "apikey" in st.secrets:
        st.session_state["paras"] = {
            "temperature": st.session_state["temperature" + current_chat],
            "top_p": st.session_state["top_p" + current_chat],
            "presence_penalty": st.session_state["presence_penalty" + current_chat],
            "frequency_penalty": st.session_state["frequency_penalty" + current_chat],
        }
        st.session_state["contexts"] = {
            "context_select": st.session_state["context_select" + current_chat],
            "context_input": st.session_state["context_input" + current_chat],
            "context_level": st.session_state["context_level" + current_chat],
        }
        save_data(
            st.session_state["path"],
            new_chat_name,
            st.session_state["history" + current_chat],
            st.session_state["paras"],
            st.session_state["contexts"],
        )


def reset_chat_name_fun(chat_name):
    chat_name = chat_name + "_" + str(uuid.uuid4())
    new_name = filename_correction(chat_name)
    current_chat_index = st.session_state["history_chats"].index(current_chat)
    st.session_state["history_chats"][current_chat_index] = new_name
    st.session_state["current_chat_index"] = current_chat_index
    # –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    write_data(new_name)
    # –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    st.session_state["history" + new_name] = st.session_state["history" + current_chat]
    for item in [
        "context_select",
        "context_input",
        "context_level",
        *initial_content_all["paras"],
    ]:
        st.session_state[item + new_name + "value"] = st.session_state[
            item + current_chat + "value"
        ]
    remove_data(st.session_state["path"], current_chat)


def create_chat_fun():
    st.session_state["history_chats"] = [
        "New Chat_" + str(uuid.uuid4())
    ] + st.session_state["history_chats"]
    st.session_state["current_chat_index"] = 0


def delete_chat_fun():
    if len(st.session_state["history_chats"]) == 1:
        chat_init = "New Chat_" + str(uuid.uuid4())
        st.session_state["history_chats"].append(chat_init)
    pre_chat_index = st.session_state["history_chats"].index(current_chat)
    if pre_chat_index > 0:
        st.session_state["current_chat_index"] = (
            st.session_state["history_chats"].index(current_chat) - 1
        )
    else:
        st.session_state["current_chat_index"] = 0
    st.session_state["history_chats"].remove(current_chat)
    remove_data(st.session_state["path"], current_chat)


with st.sidebar:
    c1, c2 = st.columns(2)
    create_chat_button = c1.button(
        "–ù–æ–≤—ã–π", use_container_width=True, key="create_chat_button"
    )
    if create_chat_button:
        create_chat_fun()
        st.experimental_rerun()

    delete_chat_button = c2.button(
        "–£–¥–∞–ª–∏—Ç—å", use_container_width=True, key="delete_chat_button"
    )
    if delete_chat_button:
        delete_chat_fun()
        st.experimental_rerun()

with st.sidebar:
    if ("set_chat_name" in st.session_state) and st.session_state[
        "set_chat_name"
    ] != "":
        reset_chat_name_fun(st.session_state["set_chat_name"])
        st.session_state["set_chat_name"] = ""
        st.experimental_rerun()

    st.write("\n")
    st.write("\n")
    st.text_input("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –æ–∫–Ω–∞Ôºö", key="set_chat_name", placeholder="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –≤–æ–π—Ç–∏")
    st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—åÔºö", index=0, options=["gpt-3.5-turbo", "gpt-4"], key="select_model"
    )
    st.write("\n")
    st.caption(
        """
    - –î–≤–∞–∂–¥—ã —â–µ–ª–∫–Ω–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    - Ctrl + Enter –ë—ã—Å—Ç—Ä–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    """
    )
    st.markdown(
        '<a href="https://github.com/PuchBuch/ChatGPT-Assistant" target="_blank" rel="ChatGPT-Assistant">'
        '<img src="https://badgen.net/badge/icon/GitHub?icon=github&amp;label=ChatGPT Assistant" alt="GitHub">'
        "</a>",
        unsafe_allow_html=True,
    )

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
if "history" + current_chat not in st.session_state:
    for key, value in load_data(st.session_state["path"], current_chat).items():
        if key == "history":
            st.session_state[key + current_chat] = value
        else:
            for k, v in value.items():
                st.session_state[k + current_chat + "value"] = v

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Ä–æ–≤–Ω–∏ —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã, –∏–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.
container_show_messages = st.container()
container_show_messages.write("")
# ÂØπËØùÂ±ïÁ§∫
with container_show_messages:
    if st.session_state["history" + current_chat]:
        show_messages(current_chat, st.session_state["history" + current_chat])

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
if any(st.session_state["delete_dict"].values()):
    for key, value in st.session_state["delete_dict"].items():
        try:
            deleteCount = value.get("deleteCount")
        except AttributeError:
            deleteCount = None
        if deleteCount == st.session_state["delete_count"]:
            delete_keys = key
            st.session_state["delete_count"] = deleteCount + 1
            delete_current_chat, idr = delete_keys.split(">")
            df_history_tem = pd.DataFrame(
                st.session_state["history" + delete_current_chat]
            )
            df_history_tem.drop(
                index=df_history_tem.query("role=='user'").iloc[[int(idr)], :].index,
                inplace=True,
            )
            df_history_tem.drop(
                index=df_history_tem.query("role=='assistant'")
                .iloc[[int(idr)], :]
                .index,
                inplace=True,
            )
            st.session_state["history" + delete_current_chat] = df_history_tem.to_dict(
                "records"
            )
            write_data()
            st.experimental_rerun()


def callback_fun(arg):
    # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ¬´–°–æ–∑–¥–∞—Ç—å¬ª –∏ ¬´–£–¥–∞–ª–∏—Ç—å¬ª –≤—ã–∑–æ–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –æ—à–∏–±–∫–∏, —á—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–∫–∏.
    if ("history" + current_chat in st.session_state) and (
        "frequency_penalty" + current_chat in st.session_state
    ):
        write_data()
        st.session_state[arg + current_chat + "value"] = st.session_state[
            arg + current_chat
        ]


def clear_button_callback():
    st.session_state["history" + current_chat] = []
    write_data()


def delete_all_chat_button_callback():
    if "apikey" in st.secrets:
        folder_path = st.session_state["path"]
        file_list = os.listdir(folder_path)
        for file_name in file_list:
            file_path = os.path.join(folder_path, file_name)
            if file_name.endswith(".json") and os.path.isfile(file_path):
                os.remove(file_path)
    st.session_state["current_chat_index"] = 0
    st.session_state["history_chats"] = ["New Chat_" + str(uuid.uuid4())]


def save_set(arg):
    st.session_state[arg + "_value"] = st.session_state[arg]
    if "apikey" in st.secrets:
        with open("./set.json", "w", encoding="utf-8") as f:
            json.dump(
                {
                    "open_text_toolkit_value": st.session_state["open_text_toolkit"],
                    "open_voice_toolkit_value": st.session_state["open_voice_toolkit"],
                },
                f,
            )


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
area_user_svg = st.empty()
area_user_content = st.empty()
# –û—Ç–≤–µ—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å
area_gpt_svg = st.empty()
area_gpt_content = st.empty()
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
area_error = st.empty()

st.write("\n")
st.header("ChatGPT –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
tap_input, tap_context, tap_model, tab_func = st.tabs(
    ["üí¨ –ß–∞—Ç", "üóíÔ∏è –ù–∞—á–∞–ª–æ", "‚öôÔ∏è –ú–æ–¥–µ–ª—å", "üõ†Ô∏è –§—É–Ω–∫—Ü–∏–∏"]
)

with tap_context:
    set_context_list = list(set_context_all.keys())
    value = st.session_state.get("context_select" + current_chat + "value")
    
    # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    context_select_index = set_context_list.index(value) if value in set_context_list else 0
    
    st.selectbox(
        label="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç",
        options=set_context_list,
        key="context_select" + current_chat,
        index=context_select_index,
        on_change=callback_fun,
        args=("context_select",),
    )
    st.caption(set_context_all[st.session_state["context_select" + current_chat]])

    st.text_area(
        label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—ÇÔºö",
        key="context_input" + current_chat,
        value=st.session_state["context_input" + current_chat + "value"],
        on_change=callback_fun,
        args=("context_input",),
    )

with tap_model:
    st.markdown("OpenAI API Key (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    st.text_input(
        "OpenAI API Key (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        type="password",
        key="apikey_input",
        label_visibility="collapsed",
    )
    st.caption(
        "–≠—Ç–æ—Ç –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µÔºå–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ —á–µ–º –∫–æ–Ω—Ñ–∏–≥–∞—Ä–∞—Ü–∏—è –≤ —Å–µ–∫—Ä–µ—Ç–∞—ÖÔºå–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –í–∞–ºÔºå–∏–º –Ω–µ–ª—å–∑—è –ø–æ–¥–µ–ª–∏—Ç—Å—è [–ü–æ–ª—É—á–∏—Ç—å —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞](https://platform.openai.com/account/api-keys)"
    )

    st.markdown("–í—Ä–µ–º—è —á–∞—Ç–∞Ôºö")
    st.slider(
        "Context Level",
        0,
        10,
        st.session_state["context_level" + current_chat + "value"],
        1,
        on_change=callback_fun,
        key="context_level" + current_chat,
        args=("context_level",),
        help="–£–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤Ôºå–≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤ –∫–∞–∂–¥—ã–π —Å–µ–∞–Ω—Å. –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è",
    )

    st.markdown("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏Ôºö")
    st.slider(
        "Temperature",
        0.0,
        2.0,
        st.session_state["temperature" + current_chat + "value"],
        0.1,
        help="""–æ—Ç 0  –¥–æ 2Ôºå–ö–∞–∫—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø—Ä–æ–± —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä. 0,8) —Å–¥–µ–ª–∞—é—Ç –≤—ã–≤–æ–¥ –±–æ–ª–µ–µ —Å–ª—É—á–∞–π–Ω—ã–º,
           –∞ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µÔºà–Ω–∞–ø—Ä–∏–º.0.2Ôºâ—Å–¥–µ–ª–∞—é—Ç –µ–≥–æ –±–æ–ª–µ–µ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∏ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã–º.
           –û–±—ã—á–Ω–æ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä top_p, –∞ –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. """,
        on_change=callback_fun,
        key="temperature" + current_chat,
        args=("temperature",),
    )
    st.slider(
        "Top P",
        0.1,
        1.0,
        st.session_state["top_p" + current_chat + "value"],
        0.1,
        help="""–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –æ—Ç–±–æ—Ä—É –ø—Ä–æ–± —Å —É—á–µ—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–±–æ—Ä–æ–º –ø—Ä–æ–±, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏. –í —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ –º–æ–¥–µ–ª—å —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤ top_p —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é.
           –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∫–æ–≥–¥–∞ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∞–≤–µ–Ω 0,1, –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä—ã, –≤–∫–ª—é—á–∞—é—â–∏–µ –≤–µ—Ä—Ö–Ω—é—é 10%-–Ω—É—é –º–∞—Å—Å—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏. –û–±—ã—á–Ω–æ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç–±–æ—Ä–∞ –ø—Ä–æ–±, –∞ –Ω–µ –æ–±–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.""",
        on_change=callback_fun,
        key="top_p" + current_chat,
        args=("top_p",),
    )
    st.slider(
        "Presence Penalty",
        -2.0,
        2.0,
        st.session_state["presence_penalty" + current_chat + "value"],
        0.1,
        help="""–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç -2,0 –¥–æ 2,0. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–∫–∞–∑—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø–æ—è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ, —Ç–µ–º —Å–∞–º—ã–º —É–≤–µ–ª–∏—á–∏–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –º–æ–¥–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–æ–≤—ã—Ö —Ç–µ–º–∞—Ö.""",
        on_change=callback_fun,
        key="presence_penalty" + current_chat,
        args=("presence_penalty",),
    )
    st.slider(
        "Frequency Penalty",
        -2.0,
        2.0,
        st.session_state["frequency_penalty" + current_chat + "value"],
        0.1,
        help="""–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç -2,0 –¥–æ 2,0. –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–∫–∞–∑—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —á–∞—Å—Ç–æ—Ç—ã –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–µ, —Ç–µ–º —Å–∞–º—ã–º —Å–Ω–∏–∂–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.""",
        on_change=callback_fun,
        key="frequency_penalty" + current_chat,
        args=("frequency_penalty",),
    )
    st.caption(
        "[–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞](https://platform.openai.com/docs/api-reference/completions/create)"
    )

with tab_func:
    c1, c2, c3 = st.columns(3)
    with c1:
        st.button("–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π", use_container_width=True, on_click=clear_button_callback)
    with c2:
        btn = st.download_button(
            label="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞",
            data=download_history(st.session_state["history" + current_chat]),
            file_name=f'{current_chat.split("_")[0]}.md',
            mime="text/markdown",
            use_container_width=True,
        )
    with c3:
        st.button(
            "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–∫–Ω–∞", use_container_width=True, on_click=delete_all_chat_button_callback
        )

    st.write("\n")
    st.markdown("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏Ôºö")
    c1, c2 = st.columns(2)
    with c1:
        if "open_text_toolkit_value" in st.session_state:
            default = st.session_state["open_text_toolkit_value"]
        else:
            default = True
        st.checkbox(
            "–í–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º",
            value=default,
            key="open_text_toolkit",
            on_change=save_set,
            args=("open_text_toolkit",),
        )
    with c2:
        if "open_voice_toolkit_value" in st.session_state:
            default = st.session_state["open_voice_toolkit_value"]
        else:
            default = True
        st.checkbox(
            "–í–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞",
            value=default,
            key="open_voice_toolkit",
            on_change=save_set,
            args=("open_voice_toolkit",),
        )

with tap_input:

    def input_callback():
        if st.session_state["user_input_area"] != "":
            # –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –æ–∫–Ω–∞
            user_input_content = st.session_state["user_input_area"]
            df_history = pd.DataFrame(st.session_state["history" + current_chat])
            if df_history.empty or len(df_history.query('role!="system"')) == 0:
                new_name = extract_chars(user_input_content, 18)
                reset_chat_name_fun(new_name)

    with st.form("input_form", clear_on_submit=True):
        user_input = st.text_area(
            "**–í–≤–æ–¥Ôºö**",
            key="user_input_area",
            help="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —è–∑—ã–∫–æ–≤—ã–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º, —á—Ç–æ —Ç–∞–∫–∂–µ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —á—Ç–µ–Ω–∏—é –ø–æ GPT, –Ω–∞–ø—Ä–∏–º–µ—Ä:"
            "\n- –ë–ª–æ–∫ –∫–æ–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Ç—Ä–µ—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö –∏ –ø–æ–º–µ—á–∞–µ—Ç—Å—è —Ç–∏–ø–æ–º —è–∑—ã–∫–∞."
            "\n- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö.",
            value=st.session_state["user_voice_value"],
        )
        submitted = st.form_submit_button(
            "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", use_container_width=True, on_click=input_callback
        )
    if submitted:
        st.session_state["user_input_content"] = user_input
        st.session_state["user_voice_value"] = ""
        st.experimental_rerun()

    if (
        "open_voice_toolkit_value" not in st.session_state
        or st.session_state["open_voice_toolkit_value"]
    ):
        # –§—É–Ω–∫—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        vocie_result = voice_toolkit()
        # vocie_result –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if (
            vocie_result and vocie_result["voice_result"]["flag"] == "interim"
        ) or st.session_state["voice_flag"] == "interim":
            st.session_state["voice_flag"] = "interim"
            st.session_state["user_voice_value"] = vocie_result["voice_result"]["value"]
            if vocie_result["voice_result"]["flag"] == "final":
                st.session_state["voice_flag"] = "final"
                st.experimental_rerun()


def get_model_input():
    # –ó–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏
    context_level = st.session_state["context_level" + current_chat]
    history = get_history_input(
        st.session_state["history" + current_chat], context_level
    ) + [{"role": "user", "content": st.session_state["pre_user_input_content"]}]
    for ctx in [
        st.session_state["context_input" + current_chat],
        set_context_all[st.session_state["context_select" + current_chat]],
    ]:
        if ctx != "":
            history = [{"role": "system", "content": ctx}] + history
    # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    paras = {
        "temperature": st.session_state["temperature" + current_chat],
        "top_p": st.session_state["top_p" + current_chat],
        "presence_penalty": st.session_state["presence_penalty" + current_chat],
        "frequency_penalty": st.session_state["frequency_penalty" + current_chat],
    }
    return history, paras


if st.session_state["user_input_content"] != "":
    if "r" in st.session_state:
        st.session_state.pop("r")
        st.session_state[current_chat + "report"] = ""
    st.session_state["pre_user_input_content"] = st.session_state["user_input_content"]
    st.session_state["user_input_content"] = ""
    # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏—Å–ø–ª–µ–π
    show_each_message(
        st.session_state["pre_user_input_content"],
        "user",
        "tem",
        [area_user_svg.markdown, area_user_content.markdown],
    )
    # –í–≤–æ–¥ –º–æ–¥–µ–ª–∏
    history_need_input, paras_need_input = get_model_input()
    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–∑–æ–≤–∞
    with st.spinner("ü§î"):
        try:
            if apikey := st.session_state["apikey_input"]:
                openai.api_key = apikey
            # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á API. –ó–∞–ø–∏—Å–∏ —á–∞—Ç–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
            elif "apikey_tem" in st.secrets:
                openai.api_key = st.secrets["apikey_tem"]
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ï—Å–ª–∏ –≤ st.secrets –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–ª—é—á API, –∑–∞–ø–∏—Å–∏ —á–∞—Ç–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ—Ç –∫–ª—é—á API –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
            else:
                openai.api_key = st.secrets["apikey"]
            r = openai.ChatCompletion.create(
                model=st.session_state["select_model"],
                messages=history_need_input,
                stream=True,
                **paras_need_input,
            )
        except (FileNotFoundError, KeyError):
            area_error.error(
                "–ö–ª—é—á OpenAI API –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–æ–¥–µ–ª–∏."
                "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. –≤ —Ä–∞–∑–¥–µ–ª–µ [–°–∫–ª–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞].(https://github.com/PuchBuch/ChatGPT-Assistant"
            )
        except openai.error.AuthenticationError:
            area_error.error("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API OpenAI.")
        except openai.error.APIConnectionError as e:
            area_error.error("–í—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –°–æ–æ–±—â–∞–µ—Ç—Å—è –æ–± –æ—à–∏–±–∫–µ:   \n" + str(e.args[0]))
        except openai.error.InvalidRequestError as e:
            area_error.error("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µÔºö   \n" + str(e.args[0]))
        except openai.error.RateLimitError as e:
            area_error.error("–ó–∞–ø—Ä–æ—Å—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µÔºö   \n" + str(e.args[0]))
        else:
            st.session_state["chat_of_r"] = current_chat
            st.session_state["r"] = r
            st.experimental_rerun()

if ("r" in st.session_state) and (current_chat == st.session_state["chat_of_r"]):
    if current_chat + "report" not in st.session_state:
        st.session_state[current_chat + "report"] = ""
    try:
        for e in st.session_state["r"]:
            if "content" in e["choices"][0]["delta"]:
                st.session_state[current_chat + "report"] += e["choices"][0]["delta"][
                    "content"
                ]
                show_each_message(
                    st.session_state["pre_user_input_content"],
                    "user",
                    "tem",
                    [area_user_svg.markdown, area_user_content.markdown],
                )
                show_each_message(
                    st.session_state[current_chat + "report"],
                    "assistant",
                    "tem",
                    [area_gpt_svg.markdown, area_gpt_content.markdown],
                )
    except ChunkedEncodingError:
        area_error.error("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ –ø–ª–æ—Ö–æ–µ, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
    # –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–æ–ø-—Å–∏—Ç—É–∞—Ü–∏—è–º–∏
    except Exception:
        pass
    else:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
        st.session_state["history" + current_chat].append(
            {"role": "user", "content": st.session_state["pre_user_input_content"]}
        )
        st.session_state["history" + current_chat].append(
            {"role": "assistant", "content": st.session_state[current_chat + "report"]}
        )
        write_data()
    # –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–°—Ç–æ–ø¬ª –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö ss –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç—ã–º.
    if current_chat + "report" in st.session_state:
        st.session_state.pop(current_chat + "report")
    if "r" in st.session_state:
        st.session_state.pop("r")
        st.experimental_rerun()

# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π
v1.html(js_code, height=0)
